// source: cluster.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var shared_pb = require('./shared_pb.js');
goog.object.extend(proto, shared_pb);
goog.exportSymbol('proto.event_store.cluster.AcceptRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.ClusterInfo', null, global);
goog.exportSymbol('proto.event_store.cluster.EndPoint', null, global);
goog.exportSymbol('proto.event_store.cluster.GossipRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.LeaderIsResigningOkRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.LeaderIsResigningRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.MemberInfo', null, global);
goog.exportSymbol('proto.event_store.cluster.MemberInfo.VNodeState', null, global);
goog.exportSymbol('proto.event_store.cluster.PrepareOkRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.PrepareRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.ProposalRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.ViewChangeProofRequest', null, global);
goog.exportSymbol('proto.event_store.cluster.ViewChangeRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.GossipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.GossipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.GossipRequest.displayName = 'proto.event_store.cluster.GossipRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.ViewChangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.ViewChangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.ViewChangeRequest.displayName = 'proto.event_store.cluster.ViewChangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.ViewChangeProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.ViewChangeProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.ViewChangeProofRequest.displayName = 'proto.event_store.cluster.ViewChangeProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.PrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.PrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.PrepareRequest.displayName = 'proto.event_store.cluster.PrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.PrepareOkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.PrepareOkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.PrepareOkRequest.displayName = 'proto.event_store.cluster.PrepareOkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.ProposalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.ProposalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.ProposalRequest.displayName = 'proto.event_store.cluster.ProposalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.AcceptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.AcceptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.AcceptRequest.displayName = 'proto.event_store.cluster.AcceptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.LeaderIsResigningRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.LeaderIsResigningRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.LeaderIsResigningRequest.displayName = 'proto.event_store.cluster.LeaderIsResigningRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.LeaderIsResigningOkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.LeaderIsResigningOkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.LeaderIsResigningOkRequest.displayName = 'proto.event_store.cluster.LeaderIsResigningOkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.ClusterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event_store.cluster.ClusterInfo.repeatedFields_, null);
};
goog.inherits(proto.event_store.cluster.ClusterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.ClusterInfo.displayName = 'proto.event_store.cluster.ClusterInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.EndPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.EndPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.EndPoint.displayName = 'proto.event_store.cluster.EndPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event_store.cluster.MemberInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event_store.cluster.MemberInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event_store.cluster.MemberInfo.displayName = 'proto.event_store.cluster.MemberInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.GossipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.GossipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.GossipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.GossipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event_store.cluster.ClusterInfo.toObject(includeInstance, f),
    server: (f = msg.getServer()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.GossipRequest}
 */
proto.event_store.cluster.GossipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.GossipRequest;
  return proto.event_store.cluster.GossipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.GossipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.GossipRequest}
 */
proto.event_store.cluster.GossipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event_store.cluster.ClusterInfo;
      reader.readMessage(value,proto.event_store.cluster.ClusterInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.GossipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.GossipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.GossipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.GossipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event_store.cluster.ClusterInfo.serializeBinaryToWriter
    );
  }
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClusterInfo info = 1;
 * @return {?proto.event_store.cluster.ClusterInfo}
 */
proto.event_store.cluster.GossipRequest.prototype.getInfo = function() {
  return /** @type{?proto.event_store.cluster.ClusterInfo} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.ClusterInfo, 1));
};


/**
 * @param {?proto.event_store.cluster.ClusterInfo|undefined} value
 * @return {!proto.event_store.cluster.GossipRequest} returns this
*/
proto.event_store.cluster.GossipRequest.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.GossipRequest} returns this
 */
proto.event_store.cluster.GossipRequest.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.GossipRequest.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint server = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.GossipRequest.prototype.getServer = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.GossipRequest} returns this
*/
proto.event_store.cluster.GossipRequest.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.GossipRequest} returns this
 */
proto.event_store.cluster.GossipRequest.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.GossipRequest.prototype.hasServer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.ViewChangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.ViewChangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ViewChangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    attemptedView: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.ViewChangeRequest}
 */
proto.event_store.cluster.ViewChangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.ViewChangeRequest;
  return proto.event_store.cluster.ViewChangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.ViewChangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.ViewChangeRequest}
 */
proto.event_store.cluster.ViewChangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttemptedView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.ViewChangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.ViewChangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ViewChangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getAttemptedView();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional event_store.client.UUID server_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.ViewChangeRequest} returns this
*/
proto.event_store.cluster.ViewChangeRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ViewChangeRequest} returns this
 */
proto.event_store.cluster.ViewChangeRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint server_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.ViewChangeRequest} returns this
*/
proto.event_store.cluster.ViewChangeRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ViewChangeRequest} returns this
 */
proto.event_store.cluster.ViewChangeRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 attempted_view = 3;
 * @return {number}
 */
proto.event_store.cluster.ViewChangeRequest.prototype.getAttemptedView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.ViewChangeRequest} returns this
 */
proto.event_store.cluster.ViewChangeRequest.prototype.setAttemptedView = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.ViewChangeProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.ViewChangeProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ViewChangeProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    installedView: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.ViewChangeProofRequest}
 */
proto.event_store.cluster.ViewChangeProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.ViewChangeProofRequest;
  return proto.event_store.cluster.ViewChangeProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.ViewChangeProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.ViewChangeProofRequest}
 */
proto.event_store.cluster.ViewChangeProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstalledView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.ViewChangeProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.ViewChangeProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ViewChangeProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getInstalledView();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional event_store.client.UUID server_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.ViewChangeProofRequest} returns this
*/
proto.event_store.cluster.ViewChangeProofRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ViewChangeProofRequest} returns this
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint server_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.ViewChangeProofRequest} returns this
*/
proto.event_store.cluster.ViewChangeProofRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ViewChangeProofRequest} returns this
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 installed_view = 3;
 * @return {number}
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.getInstalledView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.ViewChangeProofRequest} returns this
 */
proto.event_store.cluster.ViewChangeProofRequest.prototype.setInstalledView = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.PrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.PrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.PrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.PrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    view: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.PrepareRequest}
 */
proto.event_store.cluster.PrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.PrepareRequest;
  return proto.event_store.cluster.PrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.PrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.PrepareRequest}
 */
proto.event_store.cluster.PrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.PrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.PrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.PrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.PrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional event_store.client.UUID server_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.PrepareRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.PrepareRequest} returns this
*/
proto.event_store.cluster.PrepareRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareRequest} returns this
 */
proto.event_store.cluster.PrepareRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint server_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.PrepareRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.PrepareRequest} returns this
*/
proto.event_store.cluster.PrepareRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareRequest} returns this
 */
proto.event_store.cluster.PrepareRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 view = 3;
 * @return {number}
 */
proto.event_store.cluster.PrepareRequest.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.PrepareRequest} returns this
 */
proto.event_store.cluster.PrepareRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.PrepareOkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.PrepareOkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.PrepareOkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    view: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    epochNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    epochPosition: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    epochId: (f = msg.getEpochId()) && shared_pb.UUID.toObject(includeInstance, f),
    epochLeaderInstanceId: (f = msg.getEpochLeaderInstanceId()) && shared_pb.UUID.toObject(includeInstance, f),
    lastCommitPosition: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    writerCheckpoint: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    chaserCheckpoint: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    nodePriority: jspb.Message.getFieldWithDefault(msg, 11, 0),
    clusterInfo: (f = msg.getClusterInfo()) && proto.event_store.cluster.ClusterInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.PrepareOkRequest}
 */
proto.event_store.cluster.PrepareOkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.PrepareOkRequest;
  return proto.event_store.cluster.PrepareOkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.PrepareOkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.PrepareOkRequest}
 */
proto.event_store.cluster.PrepareOkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setView(value);
      break;
    case 2:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 3:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEpochNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setEpochPosition(value);
      break;
    case 6:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setEpochId(value);
      break;
    case 7:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setEpochLeaderInstanceId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLastCommitPosition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setWriterCheckpoint(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setChaserCheckpoint(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodePriority(value);
      break;
    case 12:
      var value = new proto.event_store.cluster.ClusterInfo;
      reader.readMessage(value,proto.event_store.cluster.ClusterInfo.deserializeBinaryFromReader);
      msg.setClusterInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.PrepareOkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.PrepareOkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.PrepareOkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getView();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getEpochNumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEpochPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getEpochId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEpochLeaderInstanceId();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getLastCommitPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = message.getWriterCheckpoint();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getChaserCheckpoint();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      10,
      f
    );
  }
  f = message.getNodePriority();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getClusterInfo();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.event_store.cluster.ClusterInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 view = 1;
 * @return {number}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional event_store.client.UUID server_id = 2;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 2));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
*/
proto.event_store.cluster.PrepareOkRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EndPoint server_http = 3;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 3));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
*/
proto.event_store.cluster.PrepareOkRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 epoch_number = 4;
 * @return {number}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getEpochNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setEpochNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 epoch_position = 5;
 * @return {string}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getEpochPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setEpochPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional event_store.client.UUID epoch_id = 6;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getEpochId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 6));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
*/
proto.event_store.cluster.PrepareOkRequest.prototype.setEpochId = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.clearEpochId = function() {
  return this.setEpochId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.hasEpochId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional event_store.client.UUID epoch_leader_instance_id = 7;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getEpochLeaderInstanceId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 7));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
*/
proto.event_store.cluster.PrepareOkRequest.prototype.setEpochLeaderInstanceId = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.clearEpochLeaderInstanceId = function() {
  return this.setEpochLeaderInstanceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.hasEpochLeaderInstanceId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 last_commit_position = 8;
 * @return {string}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getLastCommitPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setLastCommitPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional int64 writer_checkpoint = 9;
 * @return {string}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getWriterCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setWriterCheckpoint = function(value) {
  return jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional int64 chaser_checkpoint = 10;
 * @return {string}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getChaserCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setChaserCheckpoint = function(value) {
  return jspb.Message.setProto3StringIntField(this, 10, value);
};


/**
 * optional int32 node_priority = 11;
 * @return {number}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getNodePriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.setNodePriority = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional ClusterInfo cluster_info = 12;
 * @return {?proto.event_store.cluster.ClusterInfo}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.getClusterInfo = function() {
  return /** @type{?proto.event_store.cluster.ClusterInfo} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.ClusterInfo, 12));
};


/**
 * @param {?proto.event_store.cluster.ClusterInfo|undefined} value
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
*/
proto.event_store.cluster.PrepareOkRequest.prototype.setClusterInfo = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.PrepareOkRequest} returns this
 */
proto.event_store.cluster.PrepareOkRequest.prototype.clearClusterInfo = function() {
  return this.setClusterInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.PrepareOkRequest.prototype.hasClusterInfo = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.ProposalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.ProposalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.ProposalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ProposalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    leaderId: (f = msg.getLeaderId()) && shared_pb.UUID.toObject(includeInstance, f),
    leaderHttp: (f = msg.getLeaderHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    view: jspb.Message.getFieldWithDefault(msg, 5, 0),
    epochNumber: jspb.Message.getFieldWithDefault(msg, 6, 0),
    epochPosition: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    epochId: (f = msg.getEpochId()) && shared_pb.UUID.toObject(includeInstance, f),
    epochLeaderInstanceId: (f = msg.getEpochLeaderInstanceId()) && shared_pb.UUID.toObject(includeInstance, f),
    lastCommitPosition: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    writerCheckpoint: jspb.Message.getFieldWithDefault(msg, 11, "0"),
    chaserCheckpoint: jspb.Message.getFieldWithDefault(msg, 12, "0"),
    nodePriority: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.ProposalRequest}
 */
proto.event_store.cluster.ProposalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.ProposalRequest;
  return proto.event_store.cluster.ProposalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.ProposalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.ProposalRequest}
 */
proto.event_store.cluster.ProposalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    case 3:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setLeaderId(value);
      break;
    case 4:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setLeaderHttp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setView(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEpochNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setEpochPosition(value);
      break;
    case 8:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setEpochId(value);
      break;
    case 9:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setEpochLeaderInstanceId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLastCommitPosition(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setWriterCheckpoint(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setChaserCheckpoint(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodePriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.ProposalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.ProposalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.ProposalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ProposalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getLeaderId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getLeaderHttp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getEpochNumber();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getEpochPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = message.getEpochId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEpochLeaderInstanceId();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getLastCommitPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      10,
      f
    );
  }
  f = message.getWriterCheckpoint();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      11,
      f
    );
  }
  f = message.getChaserCheckpoint();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      12,
      f
    );
  }
  f = message.getNodePriority();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional event_store.client.UUID server_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.ProposalRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
*/
proto.event_store.cluster.ProposalRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ProposalRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint server_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.ProposalRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
*/
proto.event_store.cluster.ProposalRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ProposalRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional event_store.client.UUID leader_id = 3;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.ProposalRequest.prototype.getLeaderId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 3));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
*/
proto.event_store.cluster.ProposalRequest.prototype.setLeaderId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.clearLeaderId = function() {
  return this.setLeaderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ProposalRequest.prototype.hasLeaderId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EndPoint leader_http = 4;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.ProposalRequest.prototype.getLeaderHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 4));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
*/
proto.event_store.cluster.ProposalRequest.prototype.setLeaderHttp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.clearLeaderHttp = function() {
  return this.setLeaderHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ProposalRequest.prototype.hasLeaderHttp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 view = 5;
 * @return {number}
 */
proto.event_store.cluster.ProposalRequest.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 epoch_number = 6;
 * @return {number}
 */
proto.event_store.cluster.ProposalRequest.prototype.getEpochNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setEpochNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 epoch_position = 7;
 * @return {string}
 */
proto.event_store.cluster.ProposalRequest.prototype.getEpochPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setEpochPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * optional event_store.client.UUID epoch_id = 8;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.ProposalRequest.prototype.getEpochId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 8));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
*/
proto.event_store.cluster.ProposalRequest.prototype.setEpochId = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.clearEpochId = function() {
  return this.setEpochId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ProposalRequest.prototype.hasEpochId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional event_store.client.UUID epoch_leader_instance_id = 9;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.ProposalRequest.prototype.getEpochLeaderInstanceId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 9));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
*/
proto.event_store.cluster.ProposalRequest.prototype.setEpochLeaderInstanceId = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.clearEpochLeaderInstanceId = function() {
  return this.setEpochLeaderInstanceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.ProposalRequest.prototype.hasEpochLeaderInstanceId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 last_commit_position = 10;
 * @return {string}
 */
proto.event_store.cluster.ProposalRequest.prototype.getLastCommitPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setLastCommitPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 10, value);
};


/**
 * optional int64 writer_checkpoint = 11;
 * @return {string}
 */
proto.event_store.cluster.ProposalRequest.prototype.getWriterCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setWriterCheckpoint = function(value) {
  return jspb.Message.setProto3StringIntField(this, 11, value);
};


/**
 * optional int64 chaser_checkpoint = 12;
 * @return {string}
 */
proto.event_store.cluster.ProposalRequest.prototype.getChaserCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setChaserCheckpoint = function(value) {
  return jspb.Message.setProto3StringIntField(this, 12, value);
};


/**
 * optional int32 node_priority = 13;
 * @return {number}
 */
proto.event_store.cluster.ProposalRequest.prototype.getNodePriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.ProposalRequest} returns this
 */
proto.event_store.cluster.ProposalRequest.prototype.setNodePriority = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.AcceptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.AcceptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.AcceptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.AcceptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    leaderId: (f = msg.getLeaderId()) && shared_pb.UUID.toObject(includeInstance, f),
    leaderHttp: (f = msg.getLeaderHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    view: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.AcceptRequest}
 */
proto.event_store.cluster.AcceptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.AcceptRequest;
  return proto.event_store.cluster.AcceptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.AcceptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.AcceptRequest}
 */
proto.event_store.cluster.AcceptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    case 3:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setLeaderId(value);
      break;
    case 4:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setLeaderHttp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.AcceptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.AcceptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.AcceptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.AcceptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getLeaderId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getLeaderHttp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional event_store.client.UUID server_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.AcceptRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
*/
proto.event_store.cluster.AcceptRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
 */
proto.event_store.cluster.AcceptRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.AcceptRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint server_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.AcceptRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
*/
proto.event_store.cluster.AcceptRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
 */
proto.event_store.cluster.AcceptRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.AcceptRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional event_store.client.UUID leader_id = 3;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.AcceptRequest.prototype.getLeaderId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 3));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
*/
proto.event_store.cluster.AcceptRequest.prototype.setLeaderId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
 */
proto.event_store.cluster.AcceptRequest.prototype.clearLeaderId = function() {
  return this.setLeaderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.AcceptRequest.prototype.hasLeaderId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EndPoint leader_http = 4;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.AcceptRequest.prototype.getLeaderHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 4));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
*/
proto.event_store.cluster.AcceptRequest.prototype.setLeaderHttp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
 */
proto.event_store.cluster.AcceptRequest.prototype.clearLeaderHttp = function() {
  return this.setLeaderHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.AcceptRequest.prototype.hasLeaderHttp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 view = 5;
 * @return {number}
 */
proto.event_store.cluster.AcceptRequest.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.AcceptRequest} returns this
 */
proto.event_store.cluster.AcceptRequest.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.LeaderIsResigningRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.LeaderIsResigningRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.LeaderIsResigningRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderId: (f = msg.getLeaderId()) && shared_pb.UUID.toObject(includeInstance, f),
    leaderHttp: (f = msg.getLeaderHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.LeaderIsResigningRequest}
 */
proto.event_store.cluster.LeaderIsResigningRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.LeaderIsResigningRequest;
  return proto.event_store.cluster.LeaderIsResigningRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.LeaderIsResigningRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.LeaderIsResigningRequest}
 */
proto.event_store.cluster.LeaderIsResigningRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setLeaderId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setLeaderHttp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.LeaderIsResigningRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.LeaderIsResigningRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.LeaderIsResigningRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getLeaderHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional event_store.client.UUID leader_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.getLeaderId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.LeaderIsResigningRequest} returns this
*/
proto.event_store.cluster.LeaderIsResigningRequest.prototype.setLeaderId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.LeaderIsResigningRequest} returns this
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.clearLeaderId = function() {
  return this.setLeaderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.hasLeaderId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint leader_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.getLeaderHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.LeaderIsResigningRequest} returns this
*/
proto.event_store.cluster.LeaderIsResigningRequest.prototype.setLeaderHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.LeaderIsResigningRequest} returns this
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.clearLeaderHttp = function() {
  return this.setLeaderHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.LeaderIsResigningRequest.prototype.hasLeaderHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.LeaderIsResigningOkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.LeaderIsResigningOkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderId: (f = msg.getLeaderId()) && shared_pb.UUID.toObject(includeInstance, f),
    leaderHttp: (f = msg.getLeaderHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    serverId: (f = msg.getServerId()) && shared_pb.UUID.toObject(includeInstance, f),
    serverHttp: (f = msg.getServerHttp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.LeaderIsResigningOkRequest;
  return proto.event_store.cluster.LeaderIsResigningOkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.LeaderIsResigningOkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setLeaderId(value);
      break;
    case 2:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setLeaderHttp(value);
      break;
    case 3:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setServerId(value);
      break;
    case 4:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setServerHttp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.LeaderIsResigningOkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.LeaderIsResigningOkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getLeaderHttp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getServerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getServerHttp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional event_store.client.UUID leader_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.getLeaderId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
*/
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.setLeaderId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.clearLeaderId = function() {
  return this.setLeaderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.hasLeaderId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndPoint leader_http = 2;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.getLeaderHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 2));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
*/
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.setLeaderHttp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.clearLeaderHttp = function() {
  return this.setLeaderHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.hasLeaderHttp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional event_store.client.UUID server_id = 3;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.getServerId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 3));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
*/
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.setServerId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.clearServerId = function() {
  return this.setServerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.hasServerId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EndPoint server_http = 4;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.getServerHttp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 4));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
*/
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.setServerHttp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.LeaderIsResigningOkRequest} returns this
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.clearServerHttp = function() {
  return this.setServerHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.LeaderIsResigningOkRequest.prototype.hasServerHttp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event_store.cluster.ClusterInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.ClusterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.ClusterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.ClusterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ClusterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.event_store.cluster.MemberInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.ClusterInfo}
 */
proto.event_store.cluster.ClusterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.ClusterInfo;
  return proto.event_store.cluster.ClusterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.ClusterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.ClusterInfo}
 */
proto.event_store.cluster.ClusterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event_store.cluster.MemberInfo;
      reader.readMessage(value,proto.event_store.cluster.MemberInfo.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.ClusterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.ClusterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.ClusterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.ClusterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event_store.cluster.MemberInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MemberInfo members = 1;
 * @return {!Array<!proto.event_store.cluster.MemberInfo>}
 */
proto.event_store.cluster.ClusterInfo.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.event_store.cluster.MemberInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event_store.cluster.MemberInfo, 1));
};


/**
 * @param {!Array<!proto.event_store.cluster.MemberInfo>} value
 * @return {!proto.event_store.cluster.ClusterInfo} returns this
*/
proto.event_store.cluster.ClusterInfo.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event_store.cluster.MemberInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event_store.cluster.MemberInfo}
 */
proto.event_store.cluster.ClusterInfo.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event_store.cluster.MemberInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event_store.cluster.ClusterInfo} returns this
 */
proto.event_store.cluster.ClusterInfo.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.EndPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.EndPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.EndPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.EndPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.EndPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.EndPoint;
  return proto.event_store.cluster.EndPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.EndPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.EndPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.EndPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.EndPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.EndPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.EndPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.event_store.cluster.EndPoint.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.EndPoint} returns this
 */
proto.event_store.cluster.EndPoint.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.event_store.cluster.EndPoint.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.EndPoint} returns this
 */
proto.event_store.cluster.EndPoint.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event_store.cluster.MemberInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event_store.cluster.MemberInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event_store.cluster.MemberInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.MemberInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceId: (f = msg.getInstanceId()) && shared_pb.UUID.toObject(includeInstance, f),
    timeStamp: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isAlive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    httpEndPoint: (f = msg.getHttpEndPoint()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    internalTcp: (f = msg.getInternalTcp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    externalTcp: (f = msg.getExternalTcp()) && proto.event_store.cluster.EndPoint.toObject(includeInstance, f),
    internalTcpUsesTls: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    externalTcpUsesTls: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    lastCommitPosition: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    writerCheckpoint: jspb.Message.getFieldWithDefault(msg, 11, "0"),
    chaserCheckpoint: jspb.Message.getFieldWithDefault(msg, 12, "0"),
    epochPosition: jspb.Message.getFieldWithDefault(msg, 13, "0"),
    epochNumber: jspb.Message.getFieldWithDefault(msg, 14, 0),
    epochId: (f = msg.getEpochId()) && shared_pb.UUID.toObject(includeInstance, f),
    nodePriority: jspb.Message.getFieldWithDefault(msg, 16, 0),
    isReadOnlyReplica: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    advertiseHostToClientAs: jspb.Message.getFieldWithDefault(msg, 18, ""),
    advertiseHttpPortToClientAs: jspb.Message.getFieldWithDefault(msg, 19, 0),
    advertiseTcpPortToClientAs: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event_store.cluster.MemberInfo}
 */
proto.event_store.cluster.MemberInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event_store.cluster.MemberInfo;
  return proto.event_store.cluster.MemberInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event_store.cluster.MemberInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event_store.cluster.MemberInfo}
 */
proto.event_store.cluster.MemberInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setInstanceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimeStamp(value);
      break;
    case 3:
      var value = /** @type {!proto.event_store.cluster.MemberInfo.VNodeState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAlive(value);
      break;
    case 5:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setHttpEndPoint(value);
      break;
    case 6:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setInternalTcp(value);
      break;
    case 7:
      var value = new proto.event_store.cluster.EndPoint;
      reader.readMessage(value,proto.event_store.cluster.EndPoint.deserializeBinaryFromReader);
      msg.setExternalTcp(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInternalTcpUsesTls(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExternalTcpUsesTls(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLastCommitPosition(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setWriterCheckpoint(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setChaserCheckpoint(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setEpochPosition(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEpochNumber(value);
      break;
    case 15:
      var value = new shared_pb.UUID;
      reader.readMessage(value,shared_pb.UUID.deserializeBinaryFromReader);
      msg.setEpochId(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodePriority(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReadOnlyReplica(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdvertiseHostToClientAs(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdvertiseHttpPortToClientAs(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdvertiseTcpPortToClientAs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event_store.cluster.MemberInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event_store.cluster.MemberInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event_store.cluster.MemberInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event_store.cluster.MemberInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTimeStamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsAlive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHttpEndPoint();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getInternalTcp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getExternalTcp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.event_store.cluster.EndPoint.serializeBinaryToWriter
    );
  }
  f = message.getInternalTcpUsesTls();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getExternalTcpUsesTls();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getLastCommitPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      10,
      f
    );
  }
  f = message.getWriterCheckpoint();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      11,
      f
    );
  }
  f = message.getChaserCheckpoint();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      12,
      f
    );
  }
  f = message.getEpochPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      13,
      f
    );
  }
  f = message.getEpochNumber();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getEpochId();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      shared_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getNodePriority();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getIsReadOnlyReplica();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getAdvertiseHostToClientAs();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getAdvertiseHttpPortToClientAs();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getAdvertiseTcpPortToClientAs();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.event_store.cluster.MemberInfo.VNodeState = {
  INITIALIZING: 0,
  DISCOVERLEADER: 1,
  UNKNOWN: 2,
  PREREPLICA: 3,
  CATCHINGUP: 4,
  CLONE: 5,
  FOLLOWER: 6,
  PRELEADER: 7,
  LEADER: 8,
  MANAGER: 9,
  SHUTTINGDOWN: 10,
  SHUTDOWN: 11,
  READONLYLEADERLESS: 12,
  PREREADONLYREPLICA: 13,
  READONLYREPLICA: 14,
  RESIGNINGLEADER: 15
};

/**
 * optional event_store.client.UUID instance_id = 1;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.MemberInfo.prototype.getInstanceId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 1));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
*/
proto.event_store.cluster.MemberInfo.prototype.setInstanceId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.clearInstanceId = function() {
  return this.setInstanceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.hasInstanceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 time_stamp = 2;
 * @return {string}
 */
proto.event_store.cluster.MemberInfo.prototype.getTimeStamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setTimeStamp = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional VNodeState state = 3;
 * @return {!proto.event_store.cluster.MemberInfo.VNodeState}
 */
proto.event_store.cluster.MemberInfo.prototype.getState = function() {
  return /** @type {!proto.event_store.cluster.MemberInfo.VNodeState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.event_store.cluster.MemberInfo.VNodeState} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_alive = 4;
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.getIsAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setIsAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional EndPoint http_end_point = 5;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.MemberInfo.prototype.getHttpEndPoint = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 5));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
*/
proto.event_store.cluster.MemberInfo.prototype.setHttpEndPoint = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.clearHttpEndPoint = function() {
  return this.setHttpEndPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.hasHttpEndPoint = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EndPoint internal_tcp = 6;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.MemberInfo.prototype.getInternalTcp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 6));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
*/
proto.event_store.cluster.MemberInfo.prototype.setInternalTcp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.clearInternalTcp = function() {
  return this.setInternalTcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.hasInternalTcp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EndPoint external_tcp = 7;
 * @return {?proto.event_store.cluster.EndPoint}
 */
proto.event_store.cluster.MemberInfo.prototype.getExternalTcp = function() {
  return /** @type{?proto.event_store.cluster.EndPoint} */ (
    jspb.Message.getWrapperField(this, proto.event_store.cluster.EndPoint, 7));
};


/**
 * @param {?proto.event_store.cluster.EndPoint|undefined} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
*/
proto.event_store.cluster.MemberInfo.prototype.setExternalTcp = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.clearExternalTcp = function() {
  return this.setExternalTcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.hasExternalTcp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool internal_tcp_uses_tls = 8;
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.getInternalTcpUsesTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setInternalTcpUsesTls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool external_tcp_uses_tls = 9;
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.getExternalTcpUsesTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setExternalTcpUsesTls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int64 last_commit_position = 10;
 * @return {string}
 */
proto.event_store.cluster.MemberInfo.prototype.getLastCommitPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setLastCommitPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 10, value);
};


/**
 * optional int64 writer_checkpoint = 11;
 * @return {string}
 */
proto.event_store.cluster.MemberInfo.prototype.getWriterCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setWriterCheckpoint = function(value) {
  return jspb.Message.setProto3StringIntField(this, 11, value);
};


/**
 * optional int64 chaser_checkpoint = 12;
 * @return {string}
 */
proto.event_store.cluster.MemberInfo.prototype.getChaserCheckpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setChaserCheckpoint = function(value) {
  return jspb.Message.setProto3StringIntField(this, 12, value);
};


/**
 * optional int64 epoch_position = 13;
 * @return {string}
 */
proto.event_store.cluster.MemberInfo.prototype.getEpochPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "0"));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setEpochPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 13, value);
};


/**
 * optional int32 epoch_number = 14;
 * @return {number}
 */
proto.event_store.cluster.MemberInfo.prototype.getEpochNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setEpochNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional event_store.client.UUID epoch_id = 15;
 * @return {?proto.event_store.client.UUID}
 */
proto.event_store.cluster.MemberInfo.prototype.getEpochId = function() {
  return /** @type{?proto.event_store.client.UUID} */ (
    jspb.Message.getWrapperField(this, shared_pb.UUID, 15));
};


/**
 * @param {?proto.event_store.client.UUID|undefined} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
*/
proto.event_store.cluster.MemberInfo.prototype.setEpochId = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.clearEpochId = function() {
  return this.setEpochId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.hasEpochId = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 node_priority = 16;
 * @return {number}
 */
proto.event_store.cluster.MemberInfo.prototype.getNodePriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setNodePriority = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional bool is_read_only_replica = 17;
 * @return {boolean}
 */
proto.event_store.cluster.MemberInfo.prototype.getIsReadOnlyReplica = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setIsReadOnlyReplica = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional string advertise_host_to_client_as = 18;
 * @return {string}
 */
proto.event_store.cluster.MemberInfo.prototype.getAdvertiseHostToClientAs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setAdvertiseHostToClientAs = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional uint32 advertise_http_port_to_client_as = 19;
 * @return {number}
 */
proto.event_store.cluster.MemberInfo.prototype.getAdvertiseHttpPortToClientAs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setAdvertiseHttpPortToClientAs = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint32 advertise_tcp_port_to_client_as = 20;
 * @return {number}
 */
proto.event_store.cluster.MemberInfo.prototype.getAdvertiseTcpPortToClientAs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.event_store.cluster.MemberInfo} returns this
 */
proto.event_store.cluster.MemberInfo.prototype.setAdvertiseTcpPortToClientAs = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


goog.object.extend(exports, proto.event_store.cluster);
